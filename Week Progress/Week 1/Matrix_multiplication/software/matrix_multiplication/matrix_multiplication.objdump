
matrix_multiplication.elf:     file format elf32-littlenios2
matrix_multiplication.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00000284 memsz 0x00000284 flags r-x
    LOAD off    0x000012a4 vaddr 0x000102a4 paddr 0x000102ac align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x000012b4 vaddr 0x000102b4 paddr 0x000102b4 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  000012ac  2**0
                  CONTENTS
  2 .text         0000026c  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  0001028c  0001028c  0000128c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000008  000102a4  000102ac  000012a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000102b4  000102b4  000012b4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000102c4  000102c4  000012ac  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000198  00000000  00000000  000012d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000c39  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000006cd  00000000  00000000  000020a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000792  00000000  00000000  0000276e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001a4  00000000  00000000  00002f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000006c4  00000000  00000000  000030a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000001d2  00000000  00000000  00003768  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000393c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  00003950  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000047a6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000047a9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000047b5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000047b6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000006  00000000  00000000  000047b7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000006  00000000  00000000  000047bd  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000006  00000000  00000000  000047c3  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  000047c9  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003c  00000000  00000000  000047d3  2**0
                  CONTENTS, READONLY
 26 .jdi          00003c88  00000000  00000000  0000480f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0002cc2f  00000000  00000000  00008497  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
0001028c l    d  .rodata	00000000 .rodata
000102a4 l    d  .rwdata	00000000 .rwdata
000102b4 l    d  .bss	00000000 .bss
000102c4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../matrix_multiplication_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 mat_mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 strlen.c
00010154 g     F .text	0000002c alt_main
000102ac g       *ABS*	00000000 __flash_rwdata_start
00010180 g     F .text	00000038 alt_putstr
00010268 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000102c0 g     O .bss	00000004 errno
000102b8 g     O .bss	00000004 alt_argv
000182a4 g       *ABS*	00000000 _gp
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000102c4 g       *ABS*	00000000 __bss_end
00010260 g     F .text	00000004 alt_dcache_flush_all
000102ac g       *ABS*	00000000 __ram_rwdata_end
000102a4 g       *ABS*	00000000 __ram_rodata_end
000102c4 g       *ABS*	00000000 end
000101dc g     F .text	00000084 altera_avalon_uart_write
00018000 g       *ABS*	00000000 __alt_stack_pointer
00010020 g     F .text	0000003c _start
000101d8 g     F .text	00000004 alt_sys_init
000102a4 g       *ABS*	00000000 __ram_rwdata_start
0001028c g       *ABS*	00000000 __ram_rodata_start
000102c4 g       *ABS*	00000000 __alt_stack_base
000102b4 g       *ABS*	00000000 __bss_start
0001005c g     F .text	00000018 main
000102b4 g     O .bss	00000004 alt_envp
000102a4 g     O .rwdata	00000004 uart_0
000102a8 g     O .rwdata	00000004 alt_errno
0001028c g       *ABS*	00000000 __flash_rodata_start
000101b8 g     F .text	00000020 alt_irq_init
000102bc g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
000102ac g       *ABS*	00000000 _edata
000102c4 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00018000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
00010270 g     F .text	0000001c strlen
00010264 g     F .text	00000004 alt_icache_flush_all
00010074 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a0a914 	ori	gp,gp,33444
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	1080ad14 	ori	r2,r2,692

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c0b114 	ori	r3,r3,708

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_gp+0xffff7da0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00100740 	call	10074 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00101540 	call	10154 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <_gp+0xffff7db4>

0001005c <main>:

#include "sys/alt_stdio.h"

int main()
{
  alt_putstr("Hello from Nios II!\n");
   1005c:	01000074 	movhi	r4,1
*/

#include "sys/alt_stdio.h"

int main()
{
   10060:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
   10064:	2100a304 	addi	r4,r4,652
*/

#include "sys/alt_stdio.h"

int main()
{
   10068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
   1006c:	00101800 	call	10180 <alt_putstr>
   10070:	003fff06 	br	10070 <_gp+0xffff7dcc>

00010074 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10074:	deffff04 	addi	sp,sp,-4
   10078:	01000074 	movhi	r4,1
   1007c:	01400074 	movhi	r5,1
   10080:	dfc00015 	stw	ra,0(sp)
   10084:	2100a904 	addi	r4,r4,676
   10088:	2940ab04 	addi	r5,r5,684

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1008c:	2140061e 	bne	r4,r5,100a8 <alt_load+0x34>
   10090:	01000074 	movhi	r4,1
   10094:	01400074 	movhi	r5,1
   10098:	21000804 	addi	r4,r4,32
   1009c:	29400804 	addi	r5,r5,32
   100a0:	2140121e 	bne	r4,r5,100ec <alt_load+0x78>
   100a4:	00000b06 	br	100d4 <alt_load+0x60>
   100a8:	00c00074 	movhi	r3,1
   100ac:	18c0ab04 	addi	r3,r3,684
   100b0:	1907c83a 	sub	r3,r3,r4
   100b4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   100b8:	10fff526 	beq	r2,r3,10090 <_gp+0xffff7dec>
    {
      *to++ = *from++;
   100bc:	114f883a 	add	r7,r2,r5
   100c0:	39c00017 	ldw	r7,0(r7)
   100c4:	110d883a 	add	r6,r2,r4
   100c8:	10800104 	addi	r2,r2,4
   100cc:	31c00015 	stw	r7,0(r6)
   100d0:	003ff906 	br	100b8 <_gp+0xffff7e14>
   100d4:	01000074 	movhi	r4,1
   100d8:	01400074 	movhi	r5,1
   100dc:	2100a304 	addi	r4,r4,652
   100e0:	2940a304 	addi	r5,r5,652

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   100e4:	2140101e 	bne	r4,r5,10128 <alt_load+0xb4>
   100e8:	00000b06 	br	10118 <alt_load+0xa4>
   100ec:	00c00074 	movhi	r3,1
   100f0:	18c00804 	addi	r3,r3,32
   100f4:	1907c83a 	sub	r3,r3,r4
   100f8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   100fc:	10fff526 	beq	r2,r3,100d4 <_gp+0xffff7e30>
    {
      *to++ = *from++;
   10100:	114f883a 	add	r7,r2,r5
   10104:	39c00017 	ldw	r7,0(r7)
   10108:	110d883a 	add	r6,r2,r4
   1010c:	10800104 	addi	r2,r2,4
   10110:	31c00015 	stw	r7,0(r6)
   10114:	003ff906 	br	100fc <_gp+0xffff7e58>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10118:	00102600 	call	10260 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   1011c:	dfc00017 	ldw	ra,0(sp)
   10120:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10124:	00102641 	jmpi	10264 <alt_icache_flush_all>
   10128:	00c00074 	movhi	r3,1
   1012c:	18c0a904 	addi	r3,r3,676
   10130:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10134:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10138:	18bff726 	beq	r3,r2,10118 <_gp+0xffff7e74>
    {
      *to++ = *from++;
   1013c:	114f883a 	add	r7,r2,r5
   10140:	39c00017 	ldw	r7,0(r7)
   10144:	110d883a 	add	r6,r2,r4
   10148:	10800104 	addi	r2,r2,4
   1014c:	31c00015 	stw	r7,0(r6)
   10150:	003ff906 	br	10138 <_gp+0xffff7e94>

00010154 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10154:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10158:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1015c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10160:	00101b80 	call	101b8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10164:	00101d80 	call	101d8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10168:	d1a00417 	ldw	r6,-32752(gp)
   1016c:	d1600517 	ldw	r5,-32748(gp)
   10170:	d1200617 	ldw	r4,-32744(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10174:	dfc00017 	ldw	ra,0(sp)
   10178:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   1017c:	001005c1 	jmpi	1005c <main>

00010180 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   10180:	defffe04 	addi	sp,sp,-8
   10184:	dc000015 	stw	r16,0(sp)
   10188:	dfc00115 	stw	ra,4(sp)
   1018c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10190:	00102700 	call	10270 <strlen>
   10194:	01000074 	movhi	r4,1
   10198:	000f883a 	mov	r7,zero
   1019c:	100d883a 	mov	r6,r2
   101a0:	800b883a 	mov	r5,r16
   101a4:	2100a904 	addi	r4,r4,676
#else
    return fputs(str, stdout);
#endif
#endif
}
   101a8:	dfc00117 	ldw	ra,4(sp)
   101ac:	dc000017 	ldw	r16,0(sp)
   101b0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   101b4:	00101dc1 	jmpi	101dc <altera_avalon_uart_write>

000101b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   101b8:	deffff04 	addi	sp,sp,-4
   101bc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   101c0:	00102680 	call	10268 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   101c4:	00800044 	movi	r2,1
   101c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   101cc:	dfc00017 	ldw	ra,0(sp)
   101d0:	dec00104 	addi	sp,sp,4
   101d4:	f800283a 	ret

000101d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   101d8:	f800283a 	ret

000101dc <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   101dc:	defffd04 	addi	sp,sp,-12
   101e0:	dc400115 	stw	r17,4(sp)
   101e4:	dc000015 	stw	r16,0(sp)
   101e8:	dfc00215 	stw	ra,8(sp)
   101ec:	3023883a 	mov	r17,r6
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
   101f0:	39d0000c 	andi	r7,r7,16384
  count = len;
   101f4:	3021883a 	mov	r16,r6

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   101f8:	20c00017 	ldw	r3,0(r4)
   101fc:	18800237 	ldwio	r2,8(r3)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
   10200:	1080100c 	andi	r2,r2,64
   10204:	10000526 	beq	r2,zero,1021c <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
   10208:	28800044 	addi	r2,r5,1
   1020c:	29400007 	ldb	r5,0(r5)
   10210:	19400135 	stwio	r5,4(r3)
      count--;
   10214:	843fffc4 	addi	r16,r16,-1
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
   10218:	100b883a 	mov	r5,r2
      count--;
    }
  }
  while (block && count);
   1021c:	3800021e 	bne	r7,zero,10228 <altera_avalon_uart_write+0x4c>
   10220:	803ff51e 	bne	r16,zero,101f8 <_gp+0xffff7f54>
   10224:	00000806 	br	10248 <altera_avalon_uart_write+0x6c>

  if (count)
   10228:	80000726 	beq	r16,zero,10248 <altera_avalon_uart_write+0x6c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   1022c:	d0a00117 	ldw	r2,-32764(gp)
   10230:	10000226 	beq	r2,zero,1023c <altera_avalon_uart_write+0x60>
   10234:	103ee83a 	callr	r2
   10238:	00000106 	br	10240 <altera_avalon_uart_write+0x64>
   1023c:	d0a00704 	addi	r2,gp,-32740
  {
    ALT_ERRNO = EWOULDBLOCK;
   10240:	00c002c4 	movi	r3,11
   10244:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
}
   10248:	8c05c83a 	sub	r2,r17,r16
   1024c:	dfc00217 	ldw	ra,8(sp)
   10250:	dc400117 	ldw	r17,4(sp)
   10254:	dc000017 	ldw	r16,0(sp)
   10258:	dec00304 	addi	sp,sp,12
   1025c:	f800283a 	ret

00010260 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10260:	f800283a 	ret

00010264 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10264:	f800283a 	ret

00010268 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10268:	000170fa 	wrctl	ienable,zero
   1026c:	f800283a 	ret

00010270 <strlen>:
   10270:	2005883a 	mov	r2,r4
   10274:	10c00007 	ldb	r3,0(r2)
   10278:	18000226 	beq	r3,zero,10284 <strlen+0x14>
   1027c:	10800044 	addi	r2,r2,1
   10280:	003ffc06 	br	10274 <_gp+0xffff7fd0>
   10284:	1105c83a 	sub	r2,r2,r4
   10288:	f800283a 	ret
